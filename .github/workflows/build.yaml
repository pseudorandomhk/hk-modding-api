name: build

on: [push, pull_request]
  branches-ignore:
    - '1028'

jobs:
  build-win:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Vanilla
      run: |
        wget https://files.catbox.moe/i4sdl6.zip -O Vanilla.zip
        unzip Vanilla.zip -d Vanilla
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
    - name: Setup ms-build
      run: sudo apt-get install -y nuget mono-devel mono-xbuild
    - name: Restore dependencies
      run: dotnet restore
    - name: Build PrePatcher
      run: |
        dotnet build PrePatcher -o PrePatcher/Output -p:Configuration=Release
    - name: Build Assembly-CSharp (Windows)
      run: |
        dotnet build Assembly-CSharp -p:SolutionDir=$PWD -p:Configuration=Release
    - name: Upload Windows Binary
      uses: actions/upload-artifact@v3
      with:
        name: ModdingApiWin
        path: ./OutputFinal/

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Vanilla
      run: |
        wget https://files.catbox.moe/j85bvb.zip -O Vanilla.zip
        unzip Vanilla.zip -d Vanilla
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
    - name: Setup ms-build
      run: sudo apt-get install -y nuget mono-devel mono-xbuild
    - name: Restore dependencies
      run: dotnet restore
    - name: Build PrePatcher
      run: |
        dotnet build PrePatcher -o PrePatcher/Output -p:Configuration=Release
    - name: Build Assembly-CSharp
      run: |
        dotnet build Assembly-CSharp -p:SolutionDir=$PWD -p:Configuration=Release
    - name: Upload Linux Binary
      uses: actions/upload-artifact@v3
      with:
        name: ModdingApiLinux
        path: ./OutputFinal/

  build-mac:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Vanilla
      run: |
        wget https://files.catbox.moe/j8fyro.zip -O Vanilla.zip
        unzip Vanilla.zip -d Vanilla
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
    - name: Setup ms-build
      run: sudo apt-get install -y nuget mono-devel mono-xbuild
    - name: Restore dependencies
      run: dotnet restore
    - name: Build PrePatcher
      run: |
        dotnet build PrePatcher -o PrePatcher/Output -p:Configuration=Release
    - name: Build Assembly-CSharp
      run: |
        dotnet build Assembly-CSharp -p:SolutionDir=$PWD -p:Configuration=Release
    - name: Upload Mac Binary
      uses: actions/upload-artifact@v3
      with:
        name: ModdingApiMac
        path: ./OutputFinal/

  release:
    needs: [build-win, build-linux, build-mac]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      - name: Zip
        run: |
            zip -jr ModdingApiWin.zip ./artifacts/ModdingApiWin/*
            zip -jr ModdingApiLinux.zip ./artifacts/ModdingApiLinux/*
            zip -jr ModdingApiMac.zip ./artifacts/ModdingApiMac/*
      - name: Generate release info
        run: |
            echo "# Checksums" > ChangeLog.txt ;
            echo "* Linux:" >> ChangeLog.txt ;
            echo -n "    * " >> ChangeLog.txt ;
            sha256sum -b ModdingApiLinux.zip | cut -d " " -f 1 >> ChangeLog.txt ;
            echo "* Mac:" >> ChangeLog.txt ;
            echo -n "    * " >> ChangeLog.txt ;
            sha256sum -b ModdingApiMac.zip | cut -d " " -f 1 >> ChangeLog.txt ;
            echo "* Windows:" >> ChangeLog.txt ;
            echo -n "    * " >> ChangeLog.txt ;
            sha256sum -b ModdingApiWin.zip | cut -d " " -f 1 >> ChangeLog.txt ;
            echo "# Changelog" >> ChangeLog.txt ;
            echo "${{ github.event.head_commit.message }}" >> ChangeLog.txt ;
      - name: Create release if a new tag is pushed
        uses: softprops/action-gh-release@v1
        with:
          body_path: ChangeLog.txt
          files: |
            ./ModdingApiWin.zip
            ./ModdingApiLinux.zip
            ./ModdingApiMac.zip
